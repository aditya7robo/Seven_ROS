#!/usr/bin/env python
PACKAGE="uavcan_ros_bridge"

from dynamic_reconfigure.parameter_generator_catkin import *

gen=ParameterGenerator()

gen.add("enableMotors",bool_t,0,"used by powerBoard to enable motors",True)
gen.add("enableLaser",bool_t,0,"used by powerBoard to enable laser sensor",False)
gen.add("enableLan",bool_t,0,"used by powerBoard to enable LAN",True)
gen.add("enableKinect",bool_t,0,"used by powerBoard to enable Kinect",False)
gen.add("enableIMUboard",bool_t,0,"used by powerBoard to enable IMU",True)
gen.add("enablePC",bool_t,0,"used by powerBoard to enable PC",False)
gen.add("enableUDOO",bool_t,0,"used by powerBoard to enable UDOO",True)
gen.add("enableAUX",bool_t,0,"used by powerBoard to enable AUX power",False)

gen.add("velcmd_CANID",int_t,0,"uavcan_id of the velocity command publishing node",5,0,100)
gen.add("imu_CANID",int_t,0,"uavcan id of imu node",10,0,100)
gen.add("wheelpos_CANID",int_t,0,"uavcan id of wheelpos publishing node",11,0,100)
gen.add("gauge_CANID",int_t,0,"uavcan id of the battery_gauge node",12,0,100)
gen.add("encoder_CANID",int_t,0,"uavcan_id of the encoder tick publishing node",13,0,100)

gen.add("PID_P",double_t,0,"Proportional gain of the PID",0,0,100.0)
gen.add("PID_I",double_t,0,"Integral gain of the PID",0,0,10.0)
gen.add("PID_D",double_t,0,"Derivative gain of the PID",0,0,10.0)



gen.add("wheelradius",double_t,0,"radius of the robot wheel in meters",0.130,0.120,140)
gen.add("wheelbase",double_t,0,"distance between differential wheels along the collinear axes in m",0.597,0.590,0.610)
gen.add("maxrpmMotor",int_t,0,"maximum rpm of the motor before gearing ratio",152,0,152)
gen.add("gearRatio",int_t,0,"wheel:motor gear ratio",2,0,4)
gen.add("maxLinearVel",double_t,0,"Maximum linear velocity of the robot m/s",1.0,0.0,1.03) 
gen.add("maxAngularVel",double_t,0,"Maximum Angular Velocity of the robot rad/s",3.35,0,3.35) 
gen.add("motorfeedBack",bool_t,0,"check if the motor feedback is available",True)

exit(gen.generate(PACKAGE,"uavcan_ros_bridge","robotParams"))
